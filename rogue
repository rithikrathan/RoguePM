#!/bin/bash

# Default values
replace= "false"
projects_dir="$HOME/Desktop/projects/"
project_name="<Placeholder>"
default_visiblity="private"  # Default to private
commit_msg="Initial commit"
default_msg="This is a default description message generated by RoguePM and will be changed in the future"
license="mit"
templates_dir="$HOME/Desktop/projects/RoguePM/RogueTemplates/" # must change it to somthing like bin as this will be a executable
template="default"
include_license="false"
config_file="$HOME/.roguerc"


cat << "EOF"
  ____                                  ____   __  __ 
 |  _ \  ___    __ _  _   _   ___      |  _ \ |  \/  |
 | |_) |/ _ \  / _` || | | | / _ \     | |_) || |\/| |
 |  _ <| (_) || (_| || |_| ||  __/     |  __/ | |  | |
 |_| \_\\___/  \__, | \__,_| \___|_____|_|    |_|  |_|
               |___/             |_____|              
EOF

backup_projects(){
	echo -e "\n[~~~~~~~~~~~~~~~~~~~~|Backing up your projects|~~~~~~~~~~~~~~~~~~]"
	for dir in $projects_dir*; do
		if [ -d "$dir/.git" ]; then
			echo -e "\e[1m[Rogue]\e[0m Checking for changes in $dir"
			cd "$dir" || continue
			if ! git diff --quiet || ! git diff --cached --quiet; then
				git add -A
				git commit -m "weekly snapshot/backup"
				branch=$(git symbolic-ref --short HEAD)
				if [ "$branch" = "master" ] || [ "$branch" = "main" ]; then
					echo -e "\e[1m[Rogue]\e[0m Pushing to Github remote in branch $branch"
					git push origin "$branch"
				else
					echo -e "\e[1m[Rogue]\e[0m Skipping push: $dir is on branch $branch"
				fi
			else
				echo -e "\e[1m[Rogue]\e[0m No changes is $dir, skipping..... "
			fi
			echo -e "\n[~~~~~~~~~~~~~~~~~~~~|Proceeding to next project|~~~~~~~~~~~~~~~~~~]"
		fi
	done
}

# Parse arguments
while [[ $# -gt 0 ]]; do
	case "$1" in
		new)read -p $'\e[1m[Rogue]\e[0m Enter project name: ' project_name
			shift 
			;;
			
		backup)
			backup_projects
			return 1
			;;
			
		-r) replace="true"; shift ;;
			
		-v) 
			if [[ "$2" != "public" && "$2" != "private" ]]; then
				echo -e "\e[1m[Rogue]\e[0m Error: Visibility must be 'public' or 'private'."
				echo -e "\e[1m[Rogue]\e[0m Exiting......"
				return 1
			fi
			default_visiblity="$2";
			shift 2
			;;
			
		-t) if [[ -z "$2" ]];then
				echo -e "\e[1m[Rogue]\e[0m Error: Template name cannot be empty."
				echo -e "\e[1m[Rogue]\e[0m Exiting......"
				return 1
			fi
			echo "Template directory path: $templates_dir$2"
			if [[ -d "$templates_dir$2" ]];then
				template="$2"; 
			else
				echo -e "\e[1m[Rogue]\e[0m Error: Template does not exist in the template directory using default template"
				template="default"
			fi
			shift 2 
			;;
			
		-m) if [[ -z "$2" ]];then
				echo -e "\e[1m[Rogue]\e[0m Error: Commit message cannot be empty."
				echo -e "\e[1m[Rogue]\e[0m Exiting......"
				return 1
			fi
			commit_msg="$2"; 
			shift 2 ;;

		-d) if [[ -z "$2" ]];then
				echo -e "\e[1m[Rogue]\e[0m Error: Description message cannot be empty."
				echo -e "\e[1m[Rogue]\e[0m Exiting......"
				return 1
			fi
			default_msg="$2"; 
			shift 2 ;;
			
		-l) include_license='true'
			if [[ -z "$2" ]];then
				echo -e "\e[1m[Rogue]\e[0m Error: License not specified."
				echo -e "\e[1m[Rogue]\e[0m Using MIT license....."
				license="mit"
			else
				license="$2"; 
			fi
			
			shift 2 ;;
		*) echo "Usage: project -n <project_name> [-r {replaces existing directory in this name}] [-v <public|private>] [-m <commit_msg>]"; return 1 ;;
	esac
done

PROJECT_DIR="$projects_dir$project_name"
# echo "projectDirectory: $PROJECT_DIR"

# Create project directory:
echo -e "\n[~~~~~~~~~~~~~~~~~~|Creating project directory|~~~~~~~~~~~~~~~~]"
# Creates a project directory {thats how your comment should be}
if [ -e "$PROJECT_DIR" ];then
	if [ "$replace" == "true" ];then
		echo -e "\e[1m[Rogue]\e[0m Replacing existing directory....."
		rm -rf "$PROJECT_DIR"
		mkdir -p "$PROJECT_DIR"
		echo -e "\e[1m[Rogue]\e[0m Current directory is set to $PROJECT_DIR"
		cd "$PROJECT_DIR" 
	else
		echo -e "\e[1m[Rogue]\e[0m Error: Directory already exists! Try again with -r flag to replace it (will delete existing data)"
		echo -e "\e[1m[Rogue]\e[0m Exiting......"
		return 1
	fi
else
	echo -e "\e[1m[Rogue]\e[0m Creating project directory....."
	mkdir -p "$PROJECT_DIR"
	echo -e "\e[1m[Rogue]\e[0m Current directory is set to $PROJECT_DIR"
	cd "$PROJECT_DIR"
fi

echo -e "\n[~~~~~~~~~~~~~~~~~|Creating GitHub repository|~~~~~~~~~~~~~~~~~]"
# Check if the GitHub CLI is authenticated
if ! gh auth status &>/dev/null; then
	echo -e "\e[1m[Rogue]\e[0m Error: GitHub CLI is not authenticated or timed out. try running  'gh auth login' first or checking your internet connection."
	echo -e "\e[1m[Rogue]\e[0m Exiting....."
	return 1
fi
# Get GitHub username using GitHub API
GITHUB_USER=$(gh api user --jq .login)
echo -e "\e[1m[Rogue]\e[0m GitHub username: $GITHUB_USER"
echo -e "\e[1m[Rogue]\e[0m GitHub repository name: $project_name"
echo -e "\e[1m[Rogue]\e[0m GitHub repository visibility: $default_visiblity"
echo -e "\e[1m[Rogue]\e[0m GitHub repository description: $default_message"

# Initialize Git
git init
gh repo create "$project_name" --"$default_visiblity" --source=. --remote=origin --description "$default_msg"
echo -e "\e[1m[Rogue]\e[0m GitHub repository created: https://github.com/$GITHUB_USER/$project_name"

echo -e "\n[~~~~~~~~~~~~~~~|Creating Basic files and folders|~~~~~~~~~~~~~]"
# runs the template script to setup the files
echo -e "\e[1m[Rogue]\e[0m Using $template template......"
~/Desktop/projects/RoguePM/RogueTemplates/$template/$template.sh -n "$project_name" -l "$license" -m "$commit_msg"


echo -e "\n[~~~~~~~~~~~~~~~~~~~~|Making initial commit|~~~~~~~~~~~~~~~~~~~]"
git add .
git commit -m "$commit_msg"

echo -e "\n[~~~~~~~~~~~~~~~~~~~~|Pushing to \e[1mMaster\e[0m branch|~~~~~~~~~~~~~~~~~~]"
git push -u origin master
echo -e "\n\e[1m[Rogue]\e[0m Exiting......"




